// Code generated by go-bindata.
// sources:
// mock/mock.json
// testcase/test1.json
// testcase/test2.json
// DO NOT EDIT!

package assembly

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mockMockJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\xdd\x4e\xe2\x40\x14\xc7\xef\x7d\x8a\xc9\x5c\x97\xd2\x96\x16\x2c\xc9\x5e\x20\xe8\xae\x4a\xd0\x00\x6a\xb6\xc6\x90\x91\x1e\x61\x96\xce\xb4\x74\x66\x64\x59\xe3\xfb\xec\x3e\x87\x2f\xb6\x99\xa1\x05\xd4\xbd\xda\x94\xcb\x9e\x8f\xdf\x9c\x8f\x9c\x7f\xef\x5f\x8e\x10\x42\x08\xdf\x8c\xbb\xb8\x8d\x3c\x6b\xf3\xd5\xa5\x72\x3d\x20\x0c\x70\x1b\xe1\xf1\x5c\x51\x8e\x0b\xc7\x48\xa6\x39\xc3\x6d\xb4\xc9\xda\x64\xde\x9e\xf3\x18\x7e\xea\x50\xb7\x08\x33\xf6\x3b\xca\xe3\x1e\xcd\x61\x2a\x69\xca\xb5\xf7\x74\xdf\x3b\x24\x94\xf7\x08\x4d\xd6\xbb\x57\xb7\x59\x5f\x95\x90\xb8\x8d\x5c\x67\xcf\x3e\x52\x42\x12\xca\x21\xd6\x01\xa3\x0c\x20\xd6\x11\xc1\x07\xe2\x90\x48\x5d\xf3\xbe\xd9\xf3\xe7\xda\x63\x78\xc6\xfa\x5a\xb6\x02\x24\x9f\xce\xc9\x63\xa2\x33\x64\xae\xa0\xb0\xf7\xe0\x99\x4e\xa1\xec\x5e\x2c\xd6\xef\x06\x30\x84\x19\x15\x12\xf2\x31\x35\x7e\xd7\x3f\x6e\x86\x4e\xe0\x85\x41\x99\x3d\x1a\x6b\x73\xf1\x75\x92\x2a\x1e\x43\x7c\x9d\x52\xae\x3b\xc2\x25\xa5\x7f\x35\xc0\x6d\xe4\xdb\x0d\xd7\x29\x43\xcb\x98\x97\xb2\xbe\x5b\x1a\x43\xda\xa7\x66\x14\xf7\x78\x2e\x65\xd6\xae\xd7\x45\xc3\x26\x8c\xfc\x4a\x39\x59\x09\x7b\x9a\xb2\xfa\xa3\x58\xac\x25\x65\x90\x90\x4c\x80\xa8\x3f\x91\x13\xaa\xa2\x3b\xc1\x33\x92\x2e\xa3\x65\x3e\xf1\x26\x9e\xe3\xb6\x6a\x4e\x50\xf3\x5a\x36\xcb\xfc\xfd\x1d\x54\xc0\x3c\x3e\x00\x33\xac\x9e\xd9\x70\x0e\xc0\x74\x0d\xd3\x20\x1f\x3e\xee\x6c\xd2\xad\x6c\x6b\x93\xee\x21\xf6\x76\x10\x6a\x78\x08\x6a\xc3\x29\xa9\xd5\x6c\xad\xa0\xbd\xdb\xdb\xe6\xe6\xcf\x7b\xfa\x46\x7d\xdf\xeb\x3a\x41\x18\xf8\x9d\x20\x2c\xef\x75\xa0\xd8\xd5\xd3\x59\x9a\x24\xe9\x0a\x72\xb1\x27\x94\xfd\x8e\x3e\xf7\xc0\xb1\x1b\x8d\xd0\x2f\x6c\x9d\xbe\x91\x80\x9d\x24\x10\x49\xf4\x61\x23\xdc\x57\x8c\x72\xc2\xa7\x5a\x39\xc2\x30\x0c\x2d\x84\xc7\xc0\x32\xc8\x89\x54\xb9\x36\xb6\x1c\xbb\xa5\xad\xe7\x8c\xcc\xe0\x66\xd8\xd7\xf5\x6c\x7b\xae\x29\x51\x5b\x81\x90\x35\xf7\x1f\xdd\x53\x36\xfb\xdc\xf7\xf2\xc2\x5d\xe4\x81\x5a\xb2\x88\x30\x76\xb1\xfa\x62\xff\xc8\x66\x7a\x8c\xe3\x91\x91\xae\xb0\xd9\xf0\x03\xcf\x69\x59\x1b\xf1\xc4\x6d\xf4\x44\x12\x01\x16\xc2\xdf\x14\xa3\x31\x95\x5a\x9c\x9b\xbe\x85\xf0\x75\x0e\x42\x6c\x4a\xf4\x42\xdb\x77\xad\x72\x64\xe3\x75\x66\x64\x72\x74\xf9\xdd\xd3\xe4\xdb\x34\x91\x64\x66\xe2\x9a\xae\x0e\x1b\xd0\xd9\x5c\xee\x91\x77\x7f\x8b\x62\x00\xa6\xd5\x0f\x05\x6d\x35\xfa\x4c\x25\x49\x27\x8e\xf5\xeb\xfa\x95\x5e\xfe\xf6\xfb\x19\x50\x0c\x02\x75\x92\x84\xbe\xfd\x11\x16\x32\xea\x6c\xa1\x3b\x92\x24\x29\xa7\x60\xa1\x93\xd3\xdd\xcf\x2a\x07\x90\xa5\x92\x7f\x4e\x2e\xe3\xae\x73\x78\xa6\xb0\x32\x95\x7c\x16\xdc\xff\x1d\xfb\x72\x95\x44\x57\x8c\x07\xd3\xed\xd8\x2b\x40\xf2\x88\x2d\x59\xb4\xaa\x0e\xa9\x38\xbf\x20\x0b\x16\xcd\x2a\x44\xa6\x2c\xb8\x5c\xb0\xc0\xa9\x10\x99\xb1\x88\x2e\x79\x26\x36\xc8\x87\xa3\xd7\x87\xbf\x01\x00\x00\xff\xff\x33\xd8\x60\x53\xb9\x08\x00\x00")

func mockMockJsonBytes() ([]byte, error) {
	return bindataRead(
		_mockMockJson,
		"mock/mock.json",
	)
}

func mockMockJson() (*asset, error) {
	bytes, err := mockMockJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mock/mock.json", size: 2233, mode: os.FileMode(420), modTime: time.Unix(1499457454, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testcaseTest1Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xcd\x6e\xda\x4c\x14\xdd\xe7\x29\x2c\xaf\xc1\xd8\xc6\x86\x18\xe9\x5b\x10\x48\xbe\x26\x41\x24\x02\x92\xa8\x8e\x22\x34\xc1\x37\x30\x65\x66\x6c\xcf\x4f\x5c\x1a\xe5\x7d\xda\xe7\xc8\x8b\x55\x33\xe0\x62\x48\x77\xf5\xd2\xe7\xdc\x7b\x74\x7f\x7c\xcf\x3c\xbe\x9d\x58\x96\x65\xd9\x77\xb3\x81\xdd\xb3\xfc\xc6\xf6\x6b\x80\xe5\x66\x8c\x28\xd8\x3d\xcb\x9e\xad\x14\x66\xf6\x8e\x98\xca\x94\x53\xbb\x67\x6d\xb3\xb6\x99\xf7\x97\x2c\x81\xef\x3a\xd4\xdb\x85\x19\xfc\x01\xb3\x64\x88\x39\x2c\x24\x4e\x99\x66\xcf\xab\xec\x04\x61\x36\x44\x98\x6c\xec\x9e\xe5\x1e\x65\xfd\xaf\x84\x3c\x82\xa7\x4a\x48\x84\x19\x24\x9a\x9f\x66\x00\xc9\x51\x80\xd6\x9b\x20\x09\x47\xb0\x1f\xac\x34\xa3\x51\x03\xbe\x97\x7d\x00\xe2\x8b\x15\x7a\x26\x3a\x41\x72\x05\x3b\x7c\x08\xaf\x78\x01\x65\xeb\x62\xbd\x39\xe8\x7e\x02\x4b\x2c\x24\xf0\x19\x36\xbc\x17\x9c\x76\xa2\xa0\xe3\x47\x61\x99\x3d\x9d\x69\x78\xf7\x75\x96\x2a\x96\x40\x72\x9b\x62\xa6\xdb\xb1\x4b\x95\xd1\xcd\xd8\xee\x59\x81\xd3\xf6\xdc\x32\xb4\x8c\x79\x2b\xeb\xbb\xc7\x09\xa4\x23\x6c\xe6\xf0\xb8\x6f\x67\x25\x65\xd6\x6b\xb5\x44\xdb\x41\x14\xfd\x48\x19\x2a\x84\xb3\x48\x69\xeb\x59\xac\x37\x12\x53\x20\x28\x13\x20\x5a\x2f\xe8\x0c\xab\xf8\x41\xb0\x0c\xa5\x79\x9c\xf3\xb9\x3f\xf7\x5d\xaf\xdb\x74\xc3\xa6\xdf\x75\x68\x16\xd8\x8d\x5a\xb4\x4e\x6b\xd4\x8a\xea\xd3\x6a\xbb\x35\x6a\x79\x46\xcb\xac\xe0\xe9\x78\x39\xf3\x41\xfd\xeb\x99\x0f\xea\x5c\x50\xad\x6a\x51\x9d\x6a\x6d\xb7\x56\x35\x6f\xa7\x76\xb0\xa8\xed\x35\x5f\x0e\xf5\xf5\x05\x81\x3f\x70\xc3\x28\x0c\xfa\x61\x54\x5e\xe2\x58\xd1\x9b\x97\x8b\x94\x90\xb4\x00\x2e\x2a\xfe\x37\xea\xeb\x43\x0e\x5d\xa7\xdd\x8e\x82\x1d\xd6\x1f\x99\xe3\xde\x1f\x3b\x92\xe8\xd0\x09\x47\x8a\x62\x86\xd8\x42\x7b\x43\x14\x45\x51\xc5\x87\x66\x40\x33\xe0\x48\x2a\xae\xc9\xae\xeb\x74\xab\xec\x25\x45\x4b\xb8\x9b\x8c\x74\x9d\x7f\x66\xd1\x54\xa2\x59\x80\x90\x4d\xef\x2f\x53\xc1\x74\xf9\x79\x1e\xf9\x95\xb7\xe6\xa1\xca\x69\x8c\x28\xbd\x2a\xfe\x73\xbe\x65\xcb\xaa\xe7\xce\xa6\xc6\xb4\xa2\x4e\xbb\x13\xfa\x6e\xf7\xc8\x3d\x0f\x8c\xd0\xa0\x5f\x14\xc5\x09\x96\xda\xa2\x3b\x41\x05\xbf\xe5\x20\xc4\xb6\x13\x3f\x72\x02\xaf\x42\x6d\x27\x3e\xdb\x64\xc6\x3f\xa7\xd7\x5f\xfd\x6a\x01\xf7\x29\x91\x68\x69\xf2\x3a\x5e\x35\x6d\x8c\x97\x2b\x6d\x75\x2f\x88\x88\x6a\x05\xfb\xb7\xe5\x68\x9e\x66\x62\xfb\x7e\x02\xdd\xcf\x81\xc1\x5f\x28\x42\xfa\x49\xa2\x2b\xd5\x95\x0c\xf9\xc7\xcf\x57\xb0\x12\x10\x56\x9f\x10\xfc\xf1\x4b\x34\x2c\x63\xed\x0d\xeb\x01\x11\x92\x32\x0c\x0d\xeb\xec\x7c\xff\xcc\x71\x00\x59\x3e\x03\x9f\x93\xcb\xb8\x5b\x0e\xaf\x18\x0a\x53\x4d\xe9\xd6\xff\xbe\xc1\xbc\x20\xf1\x0d\x65\xe1\x62\xb7\xc1\x1a\x7e\x8a\xbc\x60\x31\xcd\x69\x5c\xd4\x27\xa9\x18\xbb\x42\x6b\x1a\x2f\x6b\x94\x4c\x69\x78\xbd\xa6\xa1\x5b\xa3\x64\x46\x63\x9c\xb3\x4c\x6c\x25\x9f\x4e\xde\x9f\x7e\x07\x00\x00\xff\xff\xbc\x72\x7e\x86\xf3\x08\x00\x00")

func testcaseTest1JsonBytes() ([]byte, error) {
	return bindataRead(
		_testcaseTest1Json,
		"testcase/test1.json",
	)
}

func testcaseTest1Json() (*asset, error) {
	bytes, err := testcaseTest1JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testcase/test1.json", size: 2291, mode: os.FileMode(420), modTime: time.Unix(1498250689, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testcaseTest2Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xdd\x6e\xda\x4a\x10\xbe\xcf\x53\xac\x7c\x0d\xc6\xbf\x10\x5b\x3a\x17\x04\x4e\xce\x49\x82\x08\x02\x12\x54\x47\x11\xda\xe0\x09\x6c\xf1\xae\xed\xdd\x75\x5c\x1a\xe5\x7d\xda\xe7\xc8\x8b\x55\x6b\xe3\xc6\x38\xbd\xab\x2f\xfd\xcd\xcc\xc7\xcc\x37\xcc\xb7\x0f\xaf\x67\x08\x21\xa4\xdd\x2d\x47\x9a\x8f\xac\x4e\xf9\x35\x22\xf2\x30\xc5\x14\x34\x1f\x69\x33\xcc\x89\xd0\x8e\x81\x85\x8c\x39\xd5\x7c\x54\x56\x95\x95\xf7\x57\x2c\x84\x6f\x2a\xd5\x3e\xa6\x15\xf8\x8a\xb0\x70\x4c\x38\x6c\x24\x89\x99\x8a\xae\xea\xd1\x39\x26\x6c\x8c\x49\x74\xd0\x7c\x64\x7a\x8d\xb2\xff\x32\x21\x55\x37\x66\x0d\x5f\x64\x42\x62\xc2\x20\x54\x09\x8b\x04\x20\x54\x95\x56\x83\x72\x8e\xa5\x6a\xda\x74\x6a\xb8\xe5\xec\x54\x48\xc1\xfd\x02\x7d\xab\x86\x01\xcc\x37\x3b\xfc\x14\xa9\x12\xc9\x33\x38\xe2\x63\x78\x21\x1b\xa8\xe6\x17\xfb\xc3\x72\x97\x11\x56\x49\x30\x87\x2d\x11\x12\xf8\x92\xd0\xf2\xa7\xce\xfb\x9e\xe1\x5a\x9e\x5b\x55\x2f\x96\x0a\x3e\x7e\x5d\xc4\x19\x0b\x21\x9c\xc5\x84\xa9\x91\xb4\x8a\x65\x72\x3b\xd5\x7c\xe4\xe8\xb6\x69\x54\xa9\x55\xce\x6b\xd5\xdf\x3d\x09\x21\x9e\x90\x42\x8b\x87\x8f\x79\x76\x52\x26\x7e\xaf\x27\x6c\x1d\x53\xfc\x3d\x66\x38\x17\xfa\x26\xa6\xbd\x27\xb1\x3f\x48\x42\x21\xc2\x89\x00\xd1\x7b\xc6\x17\x24\x0b\x56\x82\x25\x38\x4e\x83\x94\xaf\xad\xb5\x65\x98\x83\xae\xe1\x76\xad\x81\x4e\x13\x47\xeb\xb4\xc2\x75\xde\x22\x97\xd7\x1e\x97\x6d\xb4\xc8\x65\x16\x5c\xc5\x0a\x1e\x9b\xcb\x59\x8f\xda\x5f\xcf\x7a\xd4\xe6\x82\x5a\x65\xf3\xda\x64\xb3\x8d\x56\xd9\xcc\x23\xdb\xc9\xa2\xca\x6b\xbe\x1a\xab\xeb\x73\x1c\x6b\x64\xb8\x9e\xeb\x0c\xdd\xf3\xea\x12\xa7\x19\xbd\x7d\xbe\x8c\xa3\x28\xce\x81\x0b\xcd\x47\x76\x75\xa2\x43\x75\xc8\xae\xa1\xdb\xb6\x77\xf4\x13\x6d\x38\x29\x8e\xfb\xe3\xd8\xb1\xc4\xa7\x76\x38\xc9\x28\x61\x98\x6d\x94\x37\x78\x9e\x57\xb7\xb6\x25\xd0\x04\x38\x96\x19\x57\xc1\xbe\xab\x0f\xea\xd1\x2b\x8a\xb7\x70\x37\x9f\xa8\x3e\x7f\x6b\xd1\xcd\x44\x37\x07\x21\xbb\xe6\x1f\x54\x21\x74\xfb\x59\x8f\xf4\xda\xdc\x73\x37\x4b\x69\x80\x29\xbd\xce\xff\xd1\xbf\x26\xdb\xba\xf1\x2e\x17\x85\x69\x79\x7d\xdb\x71\x2d\x63\xd0\xf0\x4f\xcd\x47\xcf\x38\x12\x50\x83\xff\xcf\x28\x09\x89\x54\x46\xed\xd8\x35\x7c\xc6\x41\x88\x72\x14\xc7\xd3\x9d\xba\x57\x97\x92\x2f\x0f\x49\x61\xa0\x8b\x9b\x2f\x56\xbd\x83\xfb\x38\x92\x78\xab\x42\xd6\xc0\xac\x97\x4d\xc9\x76\x27\x4f\xac\xb8\xf1\xc0\x34\xf4\x2c\x14\x6b\xcc\x73\x62\xf0\x97\x59\x14\x0d\xc3\x50\x35\xaa\x1a\x19\xf3\xf7\x1f\x2f\x80\x42\x10\x68\x18\x45\xe4\xfd\xa7\xe8\xa0\xc2\xda\x3b\x68\x85\xa3\x28\x66\x04\x3a\xe8\xe2\xdf\x8f\xb7\x8e\x03\xc8\xea\x19\xf8\x5c\x5c\xe5\xcd\x38\xbc\x10\xc8\x8b\x6e\x2a\xb7\xfe\xfb\x0d\xa6\x79\x14\xdc\x52\xe6\x6e\x8e\x1b\x6c\xe1\x4f\x91\xe6\x2c\xa0\x29\x0d\xf2\xf6\x28\x33\xc6\xae\xf1\x9e\x06\xdb\x16\x29\x63\xea\xde\xec\xa9\x6b\xb4\x48\x99\xd0\x80\xa4\x2c\x11\x25\xe5\xe3\xd9\xdb\xe3\xaf\x00\x00\x00\xff\xff\xff\xb1\x44\xc4\xf8\x08\x00\x00")

func testcaseTest2JsonBytes() ([]byte, error) {
	return bindataRead(
		_testcaseTest2Json,
		"testcase/test2.json",
	)
}

func testcaseTest2Json() (*asset, error) {
	bytes, err := testcaseTest2JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testcase/test2.json", size: 2296, mode: os.FileMode(420), modTime: time.Unix(1498250501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mock/mock.json": mockMockJson,
	"testcase/test1.json": testcaseTest1Json,
	"testcase/test2.json": testcaseTest2Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mock": &bintree{nil, map[string]*bintree{
		"mock.json": &bintree{mockMockJson, map[string]*bintree{}},
	}},
	"testcase": &bintree{nil, map[string]*bintree{
		"test1.json": &bintree{testcaseTest1Json, map[string]*bintree{}},
		"test2.json": &bintree{testcaseTest2Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

